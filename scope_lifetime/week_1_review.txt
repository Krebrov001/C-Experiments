Making an executable

gcc or g++

preprocessor (cpp) -P -E
includes header files
processes # statements
removes comments and blank lines
expands \ to a single line
does macro expansion/substitiution
The value of the macro "argument" must be known at the time of preprocessing,
not at compile time, and definitely not at runtime.
does assert() expansion.

compiler (cc1) -S
Transforms source code into assembly code.
Uses function declarations/prototypes to recognise valid and invalid calls to that function

assembler (as) -c
generates a relocatable object file
converts assembly code into object code
It is the actual code that will get executed, but the symbols to extern global variables and
function calls haven't been resolved/linked together yet.

linker (ld) -o
links together object files into an executable file, or executable object file.
does symbol resolution and links in system libraries.


The assert() macro is used to check
if a boolean condition is true:
  the call to assert converts into ((void) 0)
else if that boolean condition is false:
  calls _assert() with the stringized boolean expression, __FILE__, and __LINE__,
  then terminates the program.
Use assert() to print out diagnostic messages,
to check for preconditions and postconditions,
to check function formal parameters (parameters)
to check the assumed state of the program's data at any given point in time.
to check whether a boolean expression is true
to check if the function does what it is supposed to
save the return statement of a function into another variable, and then check
the result with assert();
The overhead associated with assert() is not worth it for production code,
when your code has already passed the testing stage, it is assumed to be true,
so use NDEBUG preprocessor macro to get rid of the assert() calls.
NDEBUG transforms assert() calls into the true condition always: ((void) 0)
Expressions which have side effects should not be passed to assert()
(x++, function calls). Use temp variables instead.
They will get preprocessed away using NDEBUG and the program will behave differently not as expected.


Function declarations/prototypes have no code/instructions associated with them.

Now function definitions are actually where that function is defined.
A function definition contains the actual code and instructions,
which are executed when the function is called.

A definition is also an implicit declaration.

A function declaration/prototype merely helps the compiler recognise valid calls to that
function, before the actual function is defined in the code.
This allows us to put the function definitions below main, as long as there is a
function declaration/prototype above main.
Function declarations/prototypes are just auxiliary information for the compiler.

A function declaration/prototype without a function definitions == no function, and no code!
The code of a function IS THE function DEFINITION!

Function declarations are extern by default.
A function declaration allows us to use a function defined in another translation unit.
In other words, a function declaration opens up the scope of that function
into the translation unit which has the declaration.

// A function declaration (prototype in this case because the formal parameters are specified)
// tells the compiler:
// This function, should I decide to use it, has the following formal parameters and return type.
// I am under no obligation to use it however.
// This is just auxiliary information for the compiler.
// The preprocessor doesn't care about it because it does not start with a preprocessor directive #
// The assembler doesn't see it, because function declarations take up no space in the assembly code.

// In C++, a f() declaration is a prototype for a function that takes no arguments.
//
// In C however, a f() declaration means that the function takes an arbitrary amount of arguments.
// A function prototype specifies the arguments/parameters that the function takes.
// Since a f() declaration in C does not specify the arguments/parameters for the function,
// It is not a prototype!
//
// To make a prototype for a function in C, that takes no arguments, use:  f(void);
// C++ also accepts this syntax, for backwards compatibility with C,
// however, to make a prototype for a function in C++, that takes no arguments,
// this is sufficient:  f();
extern void enums_function();
// function declarations are extern by default.

In the C programming language, it is possible to implicitly call a function that is defined
in another translation unit, without having a declaration, provided that the program has been linked
together properly.
This is called implicit calling of functions. The function call operator is actually an implicit
declaration of the called function in C.
The C programming language is naive, and assumes that the programmer knows what they are doing.

C++ does not allow implicit calling of functions.
In C++, all functions MUST BE DECLARED in the translation unit in which they are used,
prior to being called.

if functions are implicitly called in the translation unit, gcc generates a warning,
but does not stop the code from getting compiled and linked.
However g++ outputs an error, and the compilation/linking (make-ing) process is stopped.

Use the static keyword to limit the scope of a function to the translation unit in which it is defined.
Other translation units won't be able to see the static function.

When the storage class static is prepended to the declaration of a global variable or to a
(global) nonmember function, it restricts that variable or function to be visible in scope only inside
the translation unit where it was first defined. Other translation units cannot access it.

What is the use to the static storage class?

- When applied to a local variable inside a function, it makes that local variable have
  lifetime of the program, but visible only inside of its scope.
  All recursive function calls share this static variable.

- When applied to a global variable, it restricts the scope of the global variable to only
  the translation unit in which it was first defined.
  Other translation units cannot access the global variable.

- When applied to a (global) function, it restricts the scope of that function to only
  the translation unit in which the function was first defined.
  Other translation units cannot call the static function.

- When applied to a data member of a class, that data member is shared by all instances
  of that class. Static data members are initialized before main() is called.

- When applied to a member function of a class, that member function can be called without
  an instance of the class, however it can only access static data members of the class.
  It cannot access data members which are bound to (or a part of) their respective objects
  of that class.
  Think about it, if the static member function of a class lives outside of any objects,
  how can it access the data members inside of those individual objects?
  You want to access this field, out of which object do you want to access it?


__DATE__ expands to the date when the source file is preprocessed
__TIME__ expands to the time when the source file is preprocessed

__FILE__ expands to the filename of the source file
__LINE__ expands to the current line number
use this to change:
#line 50                // changes the __LINE__
#line 50 "NewName.cpp"  // changes the __LINE__ and the __FILE__
// It is worth noting that the new filename is specified as a string literal,
// it is supposed to be in double quotes ""

// Macro concatenation operator:
// This macro joins the two "arguments" together into one text:  ab
#define JOIN(a, b) a##b
// Macro stringizing operator:
// This macro converts both of these "arguments" into string literals,
// and puts them adjacent right next to each other:  "a""b"
// In C as well as C++, two adjacent string literals are concetenated
// into a single string literal:  "ab"
#define PRINT_NAME(a, b) #a#b

  // The preprocessor expands macro definitions before compile time,
  // and definitely before runtime.
  // This is why the only "arguments" that you can use for macro expansion
  // are the ones whose values are known DURING PREPROCESSING.
  // You cannot have the user input a value during runtime and have that
  // as an "argument" for the macro expansion.
  // Since doing marco expansion is the preprocessor's job,
  // it treats the text regNum, not the value which it evaluates to,
  // as the "argument" of the macro.

  // The following macro expansion gets preprocessed into:  AregNum
  // Since AregNum was not declared in the program, the compiler
  // outputs an error!
  //JOIN(A, regNum) = 25;

  /* You can redefine macros to be anything */
  /* redifining a macro is the same as defining a new macro with the
     same name. The meaning of the new macro will "overwrite" the meaning
     of the old macro */
  /* The old macro was a simple constant, while the new macro is a
     function-like construct! */

  /*
      String-izing Tokens
      using #token inside a macro definition will create a new string
      with the literal name, or text, of the token, and insert it into
      the #token position in the source code.

      NOTE: In C, two or more adjacent string literals are concatenated
      into a single large string literal.
      if (int token == 5), the following macro produces:
      printf("token" " is %d", token)
      "token is 5"

      String-izing Tokens can be used to print out both
      the expression itself and the resulting value to which it evaluates.
   */

  // #ifdef "executes" if a macro is defined, regardless of its value,
        // even if its value would be 0.

        // If a macro is not defined, the Preprocessor acts as though it does not
        // exist:
        // 1. It does not attempt to expand that macro, and
        // 2. Because the macro does not expand to any value at all (because it does
  //    not exist), any logical statement with it will not evaluate to anything.


use -I to cause the preprocessor to search for *.h files in another directory other than the default location
(the current directory)
use -L to cause the linker to search for lib*.a files (library files) in another directory
other than the default location (/lib, /usr/lib directories containing the standard system libraries)
#include <stdio.h>
What do the -L and -I options with the gcc and g++ compilers do?


